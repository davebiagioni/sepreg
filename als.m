function [f,y,err] = als(f,tol,stucktol,maxit,r0,rmax,vrb)
% Basic ALS iteration for fitting multivariate sep. rep. to data.
%
% Input:
%  f = basic problem data structure (generated by problem_stuct.m)
%  tol = ALS convergence tolerance.
%  stucktol = ALS tolerance for being "stuck".
%  r0 = initial ALS sep. rank.
%  rmax = max ALS sep. rank.
%  vrb = verbose flag.
%
% Output:
%  f = updated problem data structure
%  y = f.seprep(X), values of the approximation at the X nodes
%  err = vector of relative error for entire ALS iteration

  D = f.ndim; % redefine for convenience
  M = f.ord;

  % random initial guess
  f.seprep.factors = rand_cell(D,M,r0,'n');
  f.seprep.svals = ones(r0,1);
  
  % error vectors
  err.train = zeros(maxit*(rmax-r0+1),1);
  if f.cv; err.test = zeros(maxit*(rmax-r0+1),1); end
  
  % Outer ALS iteration
  itcurr = 0;  % total iteration counter
  for rnk = r0:rmax

    % do up to maxit iterations for seprank = rnk
    [f,y,erri,flag] = alsi(f,tol,stucktol,maxit,vrb);
    
    % error per iteration
    itprev = itcurr;
    itcurr = itcurr + length(erri.train);
    err.train((itprev+1):itcurr) = erri.train;
    if f.cv;  err.test((itprev+1):itcurr) = erri.test; end
    
    % converged?
    if ~f.cv
      if err.train(itcurr) < tol
        fprintf('ALS iteration converged to rank %d, err.train = %e\n',...
          rnk, err.train(itcurr));
        err.train = err.train(1:itcurr);
        return
      end
    else
      if err.test(itcurr) < tol
        fprintf('ALS iteration converged to rank %d, err.test = %e\n',...
          rnk, err.test(itcurr));
        err.test = err.test(1:itcurr);
        err.train = err.train(1:itcurr);
        return
      end      
    end
    
    % if not, increase separation rank and go again
    if rnk<rmax
      Anew = cell(1,D);
      for d = 1:D
        Anew{d} = zeros(size(f.seprep.factors{d},1),size(f.seprep.factors{d},2)+1);
        Anew{d}(:,1:(end-1)) = f.seprep.factors{d};
        Anew{d}(:,end) = randn(size(f.seprep.factors{d},1),1);
      end
      f.seprep.factors = Anew;
      f.seprep.svals = [f.seprep.svals; 1];
    end
    
  end
  
  if ~f.cv
    fprintf('ALS iteration did not converge, error in fit = %e\n',...
      err.train(itcurr));
  else
    fprintf('ALS iteration did not converge, cv error = %e\n',...
      err.test(itcurr));
  end
    
end